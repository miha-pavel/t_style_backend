#include .env
#export $(shell sed 's/=.*//' .env)

.PHONY: help up start stop restart status ps clean

install: ## Install requirements
 pip install -r requirements-dev.txt
 pip install -r requirements-dev.txt
 export PYTHONPATH="${PYTHONPATH}:$(shell pwd)/sunflower"

help: ## This help.
 @awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

up: ## Up all or c=<name> containers in foreground
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) up $(c)

up-d: ## Up all or c=<name> containers in background
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) up -d $(c)

start: ## Start all or c=<name> containers
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) start $(c)

build: ## Build all or c=<name> containers in background
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) up --build -d $(c)

build-f: ## Build all or c=<name> containers in foreground
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) up --build $(c)

stop: ## Stop all or c=<name> containers
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) stop $(c)

restart: ## Restart all or c=<name> containers
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) restart $(c)

rebuild: ## Rebuild all or c=<name> containers
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) bash -c "down && up --build -d"

logs: ## Show logs for all or c=<name> containers
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) logs --tail=$(or $(n), 100) -f $(c)

status: ## Show status of containers
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) ps

ps: status ## Alias of status

clean: ## Clean all data
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) down

down: clean ## Alias of clean

prune: ## Prune all unused containers
 docker system prune --all --volumes

images: ## Show all images
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) images

exec: ## Exec container
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) exec $(or $(c), api) bash

run-test: ## Run tests
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) exec $(or $(c), api) pytest $(or $(e), tests) --keepdb

perform: ## Perform code by black, isort and autoflake
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) exec $(or $(c), api) black $(or $(e), sunflower)
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) exec $(or $(c), api) isort $(or $(e), sunflower)
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) exec $(or $(c), api) autoflake --in-place --remove-all-unused-imports --recursive $(or $(e), sunflower)

lint: ## Check code by pylint
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) exec $(or $(c), api) pylint $(or $(e), sunflower)

coverage:
 docker-compose -f $(or $(DOCKER_COMPOSE_FILE), docker-compose.yml) exec $(or $(c), api) pytest --cov=sunflower --cov-config=.coveragerc --cov-report term-missing $(or $(e), tests/)

quality: perform lint test


run: ## run app
 python3 sunflower/web_app.py

test: ## run tests
 pytest


## Create ArangoDB  and Postgres test_db if they are not exist and
## than install postgis plugin and apply migrations for SQL DB
create_db:
 export PYTHONPATH="${PYTHONPATH}:$(shell pwd)/sunflower"
 python sunflower/data/no_sql/create_arango_db.py
 python sunflower/data/sql/create_sql_db.py
 docker exec -ti sunflowers_db_1 sh -c "psql -d test_db -U user -c 'CREATE EXTENSION postgis'"
 alembic upgrade head
